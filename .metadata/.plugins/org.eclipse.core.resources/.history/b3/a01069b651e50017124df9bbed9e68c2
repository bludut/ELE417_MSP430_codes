#include "msp430g2553.h"                                    // Microcontroller specific header file
#include "hd44780.h"                                        // HD44780 library
#include "ADC.h"
#include "myUart.h"
#include <stdio.h>

// Function prototypes
void DetermineCarPos();
void GameOver();
void LifeDecrement();
void StartGame();

// LCD Characters
#define WALL 0xff   // character of the wall
#define SPACE ' '   // character of the road
#define GOLDEN '*'  // character for the golden
#define MAP_LENGTH 50
// Game Levels
#define LEVEL1 100000
#define LEVEL2 60000
#define LEVEL3 30000

//
#define NUM_OF_LIFES 3

// Joystick button
#define JOYSTICK_PORT P2IN
#define JOYSTICK_PIN BIT5

// Buzzer and LED pin and ports
#define BUZZER_PORT P2OUT
#define BUZZER_PIN BIT3

#define LED0_PORT P1OUT
#define LED1_PORT P2OUT
#define LED0_PIN BIT3
#define LED1_PIN BIT4

// Buzzer beep delay
#define SHORT_BEEP 300000
#define LONG_BEEP 1000000


// global variables
char car[2]=">";            // character of the car
char data[MAP_LENGTH+1]= "00001220100001000200010000200011000000210010100000|";
char data2[MAP_LENGTH+1]="00000002000010000100000200010020200110000022000100|";

unsigned int CarPos = 1;    // the row of the LCD of the position of the car
unsigned int Joystick[2];   // Two axis Joystick analog data
unsigned int Point = 0;     // total point
unsigned int NumOfLife = NUM_OF_LIFES;  // Number of lifes
unsigned int NumofGolden = 0;   // number of golden
unsigned int isPause = 0; //is pause or no
unsigned int isResetGame = 0; // to reset the game
//-------------------------------------------- MAIN PROGRAM --------------------------------------------------------
void main( void )
 {
  WDTCTL = (WDTPW | WDTHOLD);                               // Stop watchdog timer

  BCSCTL1 = CALBC1_1MHZ;                                    // Set range to calibrated 1MHz
  DCOCTL  = CALDCO_1MHZ;                                    // Set DCO step and modulation to calibrated 1MHz

  // Initialize the UART and ADC module
  ADC_init();
  Uart_init();

  // Button Configuration
  P2REN |= JOYSTICK_PIN;
  P2IE |= JOYSTICK_PIN;
  P2IES |= JOYSTICK_PIN;
  P2IFG &= ~JOYSTICK_PIN;

  // BUZZER configuration
  P2DIR |= BUZZER_PIN | LED1_PIN;
  P1DIR |= LED0_PIN;
  LED1_PORT |= LED1_PIN;    // turn on the LED
  LED0_PORT |= LED0_PIN;    // turn on the LED


  // LCD
  P1DIR |= (BIT0 | BIT4 | BIT5);                       // Set P1.0 (D0) to P1.7 (D7) to output (HD44780 data lines)
  P2DIR |= (BIT0 | BIT1 | BIT2);                                    // Set P2.0 (E) and P2.1 (RS) to output (HD44780 control lines - R/W is tied to GND)

  // timer settings
  TA0CCR1  = 1000;                                          // Set CCR1 value for 1 ms interrupt (1000 / 1 MHz) = 0.001
  TA0CCTL1 = CCIE;                                          // Compare interrupt enable
  TA0CTL   = (TASSEL_2 | MC_2 | TACLR);                     // SMCLK as clock source, continuous mode, timer clear

  __bis_SR_register( GIE );                                 // Enable global interrupts

//---------------------------------------------------- START OF THE GAME ------------------------------------------
  START_OF_THE_GAME: // LABEL FOR THE START OF THE GAME

  // reset the life, golden and point
  NumOfLife = NUM_OF_LIFES;
  NumofGolden = 0;
  Point = 0;
  isPause = 0;

  // reset the life LEDs
  LED1_PORT |= LED1_PIN;    // turn on the LED
  LED0_PORT |= LED0_PIN;    // turn on the LED
  BUZZER_PORT &= ~BUZZER_PIN;


  int shift = 0;
  char map1[16];
  char map2[16];
  unsigned int i = 0;
  // configure the map
  for(i=0 ; i<MAP_LENGTH; i++){
      if(data[i] == '1')
      data[i] = WALL;
      if(data[i] == '0')
      data[i] = SPACE;
      if(data[i] == '2')
      data[i] = GOLDEN;
  }
  for(i=0 ; i<MAP_LENGTH; i++){
      if(data2[i] == '1')
      data2[i] = WALL;
      if(data2[i] == '0')
      data2[i] = SPACE;
      if(data2[i] == '2')
      data2[i] = GOLDEN;
  }

  //
  unsigned int Shift_Count=10;

  //Count for start
   StartGame();

   //Clear the Display
   hd44780_clear_screen();
   __delay_cycles(10000);

  //-------------------------------------------- INFINITE LOOP ---------------------------------
   while( 1 )
  {
      // wait when pause is active
      while(isPause == 1);

      // control the reset game status
      if(isResetGame == 1){
          isResetGame = 0;
          goto START_OF_THE_GAME;
      }


    // determine car position
    DetermineCarPos();
    // clear the screeen
    hd44780_clear_screen();

    // Shifting the map
    Shift_Count--;
    if(Shift_Count == 0){
        // shift the map
        int a = 0;
        for(a=16 ; a>=0; a--){
            map1[a] = data[a + shift];
        }
        for(a=16 ; a>=0; a--){
            map2[a] = data2[a + shift];
        }
        shift++;
        Shift_Count = 10;

        // check the car and wall positions
        if(((CarPos == 1) && (map1[0]==WALL)) ||
          ((CarPos == 2) && (map2[0]==WALL)) ){
           // When hit a wall decrease the number of life.
           LifeDecrement();
           if(NumOfLife == 0){
               GameOver();
               goto START_OF_THE_GAME;
           }
        }

        // check whether a golden is taken or not
        if(((CarPos == 1) && (map1[0] == GOLDEN)) ||
           ((CarPos == 2) && (map2[0] == GOLDEN)) ){
            NumofGolden++;
        }

        // check whether the map is end or not
        if(map1[0] == '|'){
            GameOver();
            goto START_OF_THE_GAME;
        }
    }
    // write the map and the car
    hd44780_write_string( map1, 1, 1, NO_CR_LF ); // Write text string to first row and first column of display
    hd44780_write_string( map2, 2, 1, NO_CR_LF );
    hd44780_write_string( car, CarPos, 1, NO_CR_LF );

    // LEVEL of the game
    //  determine the speed of the car
    if(Joystick[0] <400){
         _delay_cycles(LEVEL3);
         Point += 3; // add 3 point when the speed is level 3
     }
     else if(Joystick[0] < 600){
         _delay_cycles(LEVEL1);
         Point += 1; // add 1 point when the speed is level 1
     }
     else{
         _delay_cycles(LEVEL2);
         Point += 2; // add 2 point when the speed is level 2
     }
  }
}


//------------------------------ Functions for the GAME ----------------------------------------------
void DetermineCarPos(){
    // read the joystick data
    ADC_read(Joystick);
    // determine the car position
    if(Joystick[1] > 600){
        CarPos = 2;
    }else if(Joystick[1] < 400){
        CarPos=1;
    }
}

void GameOver(){

    // char arrays to hold point, life, and golden numbers
    char c_Point[3];
    char c_Lifes[1];
    char c_Golden[2];

    // long beep buzzer
    BUZZER_PORT |= BUZZER_PIN;
    _delay_cycles(LONG_BEEP);
    BUZZER_PORT &= ~BUZZER_PIN;

    // Print the game over animation
    hd44780_clear_screen();
    hd44780_write_string( "Game Over", 1, 1, NO_CR_LF );
    int i = 0;
    for(i=1 ; i<17; i++){
        hd44780_write_string( car, 2, i, NO_CR_LF );
        _delay_cycles(100000);
    }

    ////----------------------------------------------------------------------------------
    // wait until joystick button is pressed
    while((P2IFG&JOYSTICK_PIN) != JOYSTICK_PIN);

    // print the last number of lifes
    sprintf(c_Lifes, "%d", NumOfLife);
    hd44780_clear_screen();
    hd44780_write_string("Lifes : ", 1,1,NO_CR_LF);
    hd44780_write_string(c_Lifes, 1,8,NO_CR_LF);

    // Print the number of golden
    sprintf(c_Golden, "%d", NumofGolden);
    hd44780_write_string("Goldens : ", 2,1,NO_CR_LF);
    hd44780_write_string(c_Golden, 2,10,NO_CR_LF);
////----------------------------------------------------------------------------------
    // wait until joystick button is pressed
    while((P2IFG&JOYSTICK_PIN) != JOYSTICK_PIN);

    // Calculate the points
    Point += NumofGolden  + NumOfLife*10 ;

    // Print the point
    sprintf(c_Point, "%d", Point);
    hd44780_clear_screen();
    hd44780_write_string("Your point is : ", 1,1,NO_CR_LF);
    hd44780_write_string(c_Point, 2,5,NO_CR_LF);
    ////----------------------------------------------------------------------------------

    // wait until joystick button is pressed
    while((P2IFG & JOYSTICK_PIN) != JOYSTICK_PIN);

    // Print restart question
    hd44780_clear_screen();
    hd44780_write_string("Press to restart", 1,1,NO_CR_LF);
    ////----------------------------------------------------------------------------------
    // wait until joystick button is pressed
    while((P2IFG & JOYSTICK_PIN) != JOYSTICK_PIN);

}

// this function will be call when one life is lost
void LifeDecrement(){
    NumOfLife--;

    // one short biip
    BUZZER_PORT |= BUZZER_PIN;
    _delay_cycles(SHORT_BEEP);
    BUZZER_PORT &= ~BUZZER_PIN;

    if(NumOfLife == 2){
        LED1_PORT |= LED1_PIN;    // turn on the LED
        LED0_PORT &= ~LED0_PIN;    // turn on the LED

    }else if(NumOfLife == 1){
        LED1_PORT &= ~LED1_PIN;    // turn on the LED
        LED0_PORT |= LED0_PIN;    // turn on the LED

    }else {
        LED1_PORT &= ~LED1_PIN;    // turn on the LED
        LED0_PORT &= ~LED0_PIN;    // turn on the LED
    }
}

void StartGame(){
    char data[2]="3";
    int i;
    for(i=0; i<3;i++){
        hd44780_clear_screen();
        hd44780_write_string(data, 1,7,NO_CR_LF);
        if(data[0]=='1'){
            hd44780_write_string("Ready !", 2,5,NO_CR_LF);
        }
        data[0] -= 1;
        __delay_cycles(1000000);
    }
    hd44780_clear_screen();
    hd44780_write_string("Go !", 1,5,NO_CR_LF);
    __delay_cycles(1000000);
    hd44780_clear_screen();
}

///------------------------------------- INTERRRUPT SERVICE ROUTINES ----------------------------
#pragma vector = PORT2_VECTOR
__interrupt void port_inthandler(){

    isPause ^= BIT0;
    P2IFG &= ~JOYSTICK_PIN;
}

// Directive for timer interrupt
#pragma vector = TIMER0_A1_VECTOR
__interrupt void timer_0_a1_isr( void )                     // Timer 0 A1 interrupt service routine
{

  switch( TA0IV )                                           // Determine interrupt source
  {
    case 2:                                                 // CCR1 caused the interrupt
    {
      TA0CCR1 += 1000;                                      // Add CCR1 value for next interrupt in 1 ms

      hd44780_timer_isr();                                  // Call HD44780 state machine

      break;                                                // CCR1 interrupt handling done
    }
  }
}


#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
    unsigned char Rec_data;
    unsigned int a=0;
    unsigned char Map_num = 0;
    Rec_data = UCA0RXBUF;
// If MAP change command is send
    if(Rec_data == 'M'){
        while (!(IFG2&UCA0RXIFG));
        Map_num = UCA0RXBUF;
        if(Map_num == '1'){
            for(a=0 ; a< MAP_LENGTH; a++){
            while (!(IFG2&UCA0RXIFG));
            data[a] = UCA0RXBUF;
            }
        }else{
            for(a=0 ; a< MAP_LENGTH; a++){
            while (!(IFG2&UCA0RXIFG));
            data2[a] = UCA0RXBUF;
            }
        }
        // reset the game
        isResetGame = 1;
    }
// if car character command is send
    else if(Rec_data == 'C'){
        while (!(IFG2&UCA0RXIFG));
        car[0] = UCA0RXBUF;
        // reset the game
        isResetGame = 1;
    }
// else empty the buffer only
    else{
        Rec_data = UCA0RXBUF;
    }
}

